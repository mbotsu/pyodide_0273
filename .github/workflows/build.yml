name: Pyodide Build

on:
  workflow_dispatch:
  workflow_call:

env:
  PYODIDE_VERSION: '0.22.1'
  FORCE_COLOR: 3

jobs:
  build-core:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            pyodide_packages: "min-scipy-stack,colorlog,slicer,tqdm,sqlalchemy,shap,cloudpickle,statsmodels,lightgbm"
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    outputs:
      PYVERSION: ${{ steps.get_python_version.outputs.PYVERSION }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          path: pyodide_0273

      - uses: actions/checkout@v4
        name: Checkout Pyodide
        with:
          repository: pyodide/pyodide
          submodules: recursive
          ref: refs/tags/${{ env.PYODIDE_VERSION }}
          path: pyodide
      
      - name: Read the Python version from Makefile.envs
        id: get_python_version
        working-directory: pyodide
        run: |
          echo "PYVERSION=$(git grep 'export PYVERSION ?=' Makefile.envs | cut -d' ' -f4)"  >> "$GITHUB_OUTPUT"
          cp -r ../pyodide_0273/packages/* ./packages

      - name: Cache ccache output
        uses: actions/cache@v4
        with:
          path: |
            /tmp/ccache
          key: ${{ hashFiles('Makefile.envs') }}-${{ runner.os }}-v20211025-
      

      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - uses: pre-commit/action@v2.0.3

      - uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: pyodide-env
          python-version: 3.10.2
          channels: conda-forge

      - name: Check Versions
        shell: bash -l {0}
        run: |
          python --version
          node --version
          npm --version
          which python
          which node
          which npm

      - name: Install dependencies (ubuntu)
        shell: bash -l {0}
        if: ${{ contains(runner.os, 'ubuntu') }}
        run: |
          sudo apt install -y build-essential git
          conda install -y nodejs ccache f2c pkg-config swig make patch pkg-config texinfo autoconf automake libtool
          pip install -r requirements.txt

      - name: Install dependencies (Python)
        working-directory: pyodide
        shell: bash -l {0}
        run: |
          pip install -r requirements.txt

      - name: Build emsdk
        working-directory: pyodide
        shell: bash -l {0}
        run: |
          which ccache

          ccache -z
          make -C emsdk
          ccache -s

      - name: Build Cpython
        working-directory: pyodide
        shell: bash -l {0}
        run: |
          # This is necessary to use the ccache from emsdk
          source pyodide_env.sh

          which ccache

          ccache -z
          make -C cpython
          ccache -s

      - name: build Pyodide with packages ${{ matrix.pyodide_packages }}
        working-directory: pyodide
        shell: bash -l {0}
        run: |
          # This is necessary to use the ccache from emsdk
          source pyodide_env.sh
          ccache -z
          PYODIDE_PACKAGES=${{ matrix.pyodide_packages }} make
          ccache -s

      - name: check-size
        working-directory: pyodide
        shell: bash -l {0}
        run: |
          ls -lh dist/

          pip install brotli
          ./tools/check_compressed_size.py dist/pyodide.asm.* dist/python_stdlib*

      - name: Store artifacts build
        uses: actions/upload-artifact@v4
        with:
          name: core-build-${{ runner.os }}
          path: ./pyodide/dist/
          retention-days: 60

      - name: Zip artifact
        working-directory: pyodide
        run: |
          mv dist pyodide
          tar czf pyodide.tar.gz pyodide

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./pyodide/pyodide.tar.gz
          tag_name: pyodide_${{ env.PYODIDE_VERSION }}